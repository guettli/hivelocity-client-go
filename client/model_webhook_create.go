/*
Hivelocity API

Interact with Hivelocity

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// WebhookCreate struct for WebhookCreate
type WebhookCreate struct {
	Name    *string                `json:"name,omitempty"`
	Event   string                 `json:"event"`
	Url     string                 `json:"url"`
	Headers map[string]interface{} `json:"headers,omitempty"`
}

// NewWebhookCreate instantiates a new WebhookCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookCreate(event string, url string) *WebhookCreate {
	this := WebhookCreate{}
	this.Event = event
	this.Url = url
	return &this
}

// NewWebhookCreateWithDefaults instantiates a new WebhookCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookCreateWithDefaults() *WebhookCreate {
	this := WebhookCreate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *WebhookCreate) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookCreate) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *WebhookCreate) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *WebhookCreate) SetName(v string) {
	o.Name = &v
}

// GetEvent returns the Event field value
func (o *WebhookCreate) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *WebhookCreate) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *WebhookCreate) SetEvent(v string) {
	o.Event = v
}

// GetUrl returns the Url field value
func (o *WebhookCreate) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WebhookCreate) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WebhookCreate) SetUrl(v string) {
	o.Url = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *WebhookCreate) GetHeaders() map[string]interface{} {
	if o == nil || isNil(o.Headers) {
		var ret map[string]interface{}
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookCreate) GetHeadersOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Headers) {
		return map[string]interface{}{}, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *WebhookCreate) HasHeaders() bool {
	if o != nil && !isNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]interface{} and assigns it to the Headers field.
func (o *WebhookCreate) SetHeaders(v map[string]interface{}) {
	o.Headers = v
}

func (o WebhookCreate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if !isNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	return json.Marshal(toSerialize)
}

type NullableWebhookCreate struct {
	value *WebhookCreate
	isSet bool
}

func (v NullableWebhookCreate) Get() *WebhookCreate {
	return v.value
}

func (v *NullableWebhookCreate) Set(val *WebhookCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookCreate(val *WebhookCreate) *NullableWebhookCreate {
	return &NullableWebhookCreate{value: val, isSet: true}
}

func (v NullableWebhookCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
