/*
Hivelocity API

Interact with Hivelocity

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// TicketCreateReply struct for TicketCreateReply
type TicketCreateReply struct {
	Body        string                   `json:"body"`
	Hidden      *float32                 `json:"hidden,omitempty"`
	Headers     *string                  `json:"headers,omitempty"`
	ReplyTo     *string                  `json:"replyTo,omitempty"`
	Subject     *string                  `json:"subject,omitempty"`
	Type        *float32                 `json:"type,omitempty"`
	ContactId   *float32                 `json:"contactId,omitempty"`
	Cc          *string                  `json:"cc,omitempty"`
	Encrypted   *string                  `json:"encrypted,omitempty"`
	Date        *float32                 `json:"date,omitempty"`
	Attachments []map[string]interface{} `json:"attachments,omitempty"`
	Recipient   *string                  `json:"recipient,omitempty"`
}

// NewTicketCreateReply instantiates a new TicketCreateReply object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTicketCreateReply(body string) *TicketCreateReply {
	this := TicketCreateReply{}
	this.Body = body
	return &this
}

// NewTicketCreateReplyWithDefaults instantiates a new TicketCreateReply object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTicketCreateReplyWithDefaults() *TicketCreateReply {
	this := TicketCreateReply{}
	return &this
}

// GetBody returns the Body field value
func (o *TicketCreateReply) GetBody() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Body
}

// GetBodyOk returns a tuple with the Body field value
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetBodyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Body, true
}

// SetBody sets field value
func (o *TicketCreateReply) SetBody(v string) {
	o.Body = v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *TicketCreateReply) GetHidden() float32 {
	if o == nil || isNil(o.Hidden) {
		var ret float32
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetHiddenOk() (*float32, bool) {
	if o == nil || isNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *TicketCreateReply) HasHidden() bool {
	if o != nil && !isNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given float32 and assigns it to the Hidden field.
func (o *TicketCreateReply) SetHidden(v float32) {
	o.Hidden = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *TicketCreateReply) GetHeaders() string {
	if o == nil || isNil(o.Headers) {
		var ret string
		return ret
	}
	return *o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetHeadersOk() (*string, bool) {
	if o == nil || isNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *TicketCreateReply) HasHeaders() bool {
	if o != nil && !isNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given string and assigns it to the Headers field.
func (o *TicketCreateReply) SetHeaders(v string) {
	o.Headers = &v
}

// GetReplyTo returns the ReplyTo field value if set, zero value otherwise.
func (o *TicketCreateReply) GetReplyTo() string {
	if o == nil || isNil(o.ReplyTo) {
		var ret string
		return ret
	}
	return *o.ReplyTo
}

// GetReplyToOk returns a tuple with the ReplyTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetReplyToOk() (*string, bool) {
	if o == nil || isNil(o.ReplyTo) {
		return nil, false
	}
	return o.ReplyTo, true
}

// HasReplyTo returns a boolean if a field has been set.
func (o *TicketCreateReply) HasReplyTo() bool {
	if o != nil && !isNil(o.ReplyTo) {
		return true
	}

	return false
}

// SetReplyTo gets a reference to the given string and assigns it to the ReplyTo field.
func (o *TicketCreateReply) SetReplyTo(v string) {
	o.ReplyTo = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *TicketCreateReply) GetSubject() string {
	if o == nil || isNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetSubjectOk() (*string, bool) {
	if o == nil || isNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *TicketCreateReply) HasSubject() bool {
	if o != nil && !isNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *TicketCreateReply) SetSubject(v string) {
	o.Subject = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TicketCreateReply) GetType() float32 {
	if o == nil || isNil(o.Type) {
		var ret float32
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetTypeOk() (*float32, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TicketCreateReply) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given float32 and assigns it to the Type field.
func (o *TicketCreateReply) SetType(v float32) {
	o.Type = &v
}

// GetContactId returns the ContactId field value if set, zero value otherwise.
func (o *TicketCreateReply) GetContactId() float32 {
	if o == nil || isNil(o.ContactId) {
		var ret float32
		return ret
	}
	return *o.ContactId
}

// GetContactIdOk returns a tuple with the ContactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetContactIdOk() (*float32, bool) {
	if o == nil || isNil(o.ContactId) {
		return nil, false
	}
	return o.ContactId, true
}

// HasContactId returns a boolean if a field has been set.
func (o *TicketCreateReply) HasContactId() bool {
	if o != nil && !isNil(o.ContactId) {
		return true
	}

	return false
}

// SetContactId gets a reference to the given float32 and assigns it to the ContactId field.
func (o *TicketCreateReply) SetContactId(v float32) {
	o.ContactId = &v
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *TicketCreateReply) GetCc() string {
	if o == nil || isNil(o.Cc) {
		var ret string
		return ret
	}
	return *o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetCcOk() (*string, bool) {
	if o == nil || isNil(o.Cc) {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *TicketCreateReply) HasCc() bool {
	if o != nil && !isNil(o.Cc) {
		return true
	}

	return false
}

// SetCc gets a reference to the given string and assigns it to the Cc field.
func (o *TicketCreateReply) SetCc(v string) {
	o.Cc = &v
}

// GetEncrypted returns the Encrypted field value if set, zero value otherwise.
func (o *TicketCreateReply) GetEncrypted() string {
	if o == nil || isNil(o.Encrypted) {
		var ret string
		return ret
	}
	return *o.Encrypted
}

// GetEncryptedOk returns a tuple with the Encrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetEncryptedOk() (*string, bool) {
	if o == nil || isNil(o.Encrypted) {
		return nil, false
	}
	return o.Encrypted, true
}

// HasEncrypted returns a boolean if a field has been set.
func (o *TicketCreateReply) HasEncrypted() bool {
	if o != nil && !isNil(o.Encrypted) {
		return true
	}

	return false
}

// SetEncrypted gets a reference to the given string and assigns it to the Encrypted field.
func (o *TicketCreateReply) SetEncrypted(v string) {
	o.Encrypted = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *TicketCreateReply) GetDate() float32 {
	if o == nil || isNil(o.Date) {
		var ret float32
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetDateOk() (*float32, bool) {
	if o == nil || isNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *TicketCreateReply) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given float32 and assigns it to the Date field.
func (o *TicketCreateReply) SetDate(v float32) {
	o.Date = &v
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *TicketCreateReply) GetAttachments() []map[string]interface{} {
	if o == nil || isNil(o.Attachments) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetAttachmentsOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *TicketCreateReply) HasAttachments() bool {
	if o != nil && !isNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []map[string]interface{} and assigns it to the Attachments field.
func (o *TicketCreateReply) SetAttachments(v []map[string]interface{}) {
	o.Attachments = v
}

// GetRecipient returns the Recipient field value if set, zero value otherwise.
func (o *TicketCreateReply) GetRecipient() string {
	if o == nil || isNil(o.Recipient) {
		var ret string
		return ret
	}
	return *o.Recipient
}

// GetRecipientOk returns a tuple with the Recipient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TicketCreateReply) GetRecipientOk() (*string, bool) {
	if o == nil || isNil(o.Recipient) {
		return nil, false
	}
	return o.Recipient, true
}

// HasRecipient returns a boolean if a field has been set.
func (o *TicketCreateReply) HasRecipient() bool {
	if o != nil && !isNil(o.Recipient) {
		return true
	}

	return false
}

// SetRecipient gets a reference to the given string and assigns it to the Recipient field.
func (o *TicketCreateReply) SetRecipient(v string) {
	o.Recipient = &v
}

func (o TicketCreateReply) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["body"] = o.Body
	}
	if !isNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	if !isNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !isNil(o.ReplyTo) {
		toSerialize["replyTo"] = o.ReplyTo
	}
	if !isNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.ContactId) {
		toSerialize["contactId"] = o.ContactId
	}
	if !isNil(o.Cc) {
		toSerialize["cc"] = o.Cc
	}
	if !isNil(o.Encrypted) {
		toSerialize["encrypted"] = o.Encrypted
	}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !isNil(o.Recipient) {
		toSerialize["recipient"] = o.Recipient
	}
	return json.Marshal(toSerialize)
}

type NullableTicketCreateReply struct {
	value *TicketCreateReply
	isSet bool
}

func (v NullableTicketCreateReply) Get() *TicketCreateReply {
	return v.value
}

func (v *NullableTicketCreateReply) Set(val *TicketCreateReply) {
	v.value = val
	v.isSet = true
}

func (v NullableTicketCreateReply) IsSet() bool {
	return v.isSet
}

func (v *NullableTicketCreateReply) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTicketCreateReply(val *TicketCreateReply) *NullableTicketCreateReply {
	return &NullableTicketCreateReply{value: val, isSet: true}
}

func (v NullableTicketCreateReply) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTicketCreateReply) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
