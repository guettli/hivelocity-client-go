/*
Hivelocity API

Interact with Hivelocity

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ProductOption struct for ProductOption
type ProductOption struct {
	// Unique product id.
	ProductId *int32 `json:"productId,omitempty"`
	// List of available options.
	Options map[string]interface{} `json:"options,omitempty"`
	// *DEPRECATED*
	Pricing map[string]interface{} `json:"pricing,omitempty"`
}

// NewProductOption instantiates a new ProductOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductOption() *ProductOption {
	this := ProductOption{}
	return &this
}

// NewProductOptionWithDefaults instantiates a new ProductOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductOptionWithDefaults() *ProductOption {
	this := ProductOption{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ProductOption) GetProductId() int32 {
	if o == nil || isNil(o.ProductId) {
		var ret int32
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOption) GetProductIdOk() (*int32, bool) {
	if o == nil || isNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ProductOption) HasProductId() bool {
	if o != nil && !isNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given int32 and assigns it to the ProductId field.
func (o *ProductOption) SetProductId(v int32) {
	o.ProductId = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ProductOption) GetOptions() map[string]interface{} {
	if o == nil || isNil(o.Options) {
		var ret map[string]interface{}
		return ret
	}
	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOption) GetOptionsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Options) {
		return map[string]interface{}{}, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ProductOption) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given map[string]interface{} and assigns it to the Options field.
func (o *ProductOption) SetOptions(v map[string]interface{}) {
	o.Options = v
}

// GetPricing returns the Pricing field value if set, zero value otherwise.
func (o *ProductOption) GetPricing() map[string]interface{} {
	if o == nil || isNil(o.Pricing) {
		var ret map[string]interface{}
		return ret
	}
	return o.Pricing
}

// GetPricingOk returns a tuple with the Pricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductOption) GetPricingOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Pricing) {
		return map[string]interface{}{}, false
	}
	return o.Pricing, true
}

// HasPricing returns a boolean if a field has been set.
func (o *ProductOption) HasPricing() bool {
	if o != nil && !isNil(o.Pricing) {
		return true
	}

	return false
}

// SetPricing gets a reference to the given map[string]interface{} and assigns it to the Pricing field.
func (o *ProductOption) SetPricing(v map[string]interface{}) {
	o.Pricing = v
}

func (o ProductOption) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ProductId) {
		toSerialize["productId"] = o.ProductId
	}
	if !isNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !isNil(o.Pricing) {
		toSerialize["pricing"] = o.Pricing
	}
	return json.Marshal(toSerialize)
}

type NullableProductOption struct {
	value *ProductOption
	isSet bool
}

func (v NullableProductOption) Get() *ProductOption {
	return v.value
}

func (v *NullableProductOption) Set(val *ProductOption) {
	v.value = val
	v.isSet = true
}

func (v NullableProductOption) IsSet() bool {
	return v.isSet
}

func (v *NullableProductOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductOption(val *ProductOption) *NullableProductOption {
	return &NullableProductOption{value: val, isSet: true}
}

func (v NullableProductOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
