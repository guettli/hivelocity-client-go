/*
Hivelocity API

Interact with Hivelocity

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// DeviceTag struct for DeviceTag
type DeviceTag struct {
	// List of user set device tags.
	Tags []string `json:"tags,omitempty"`
}

// NewDeviceTag instantiates a new DeviceTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTag() *DeviceTag {
	this := DeviceTag{}
	return &this
}

// NewDeviceTagWithDefaults instantiates a new DeviceTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTagWithDefaults() *DeviceTag {
	this := DeviceTag{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DeviceTag) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceTag) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DeviceTag) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DeviceTag) SetTags(v []string) {
	o.Tags = v
}

func (o DeviceTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceTag struct {
	value *DeviceTag
	isSet bool
}

func (v NullableDeviceTag) Get() *DeviceTag {
	return v.value
}

func (v *NullableDeviceTag) Set(val *DeviceTag) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTag) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTag(val *DeviceTag) *NullableDeviceTag {
	return &NullableDeviceTag{value: val, isSet: true}
}

func (v NullableDeviceTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
